링크드 리스트
*노드(마디)를 연결해서 만드는 리스트
*데이터를 보관하는 필드와 다음 연결 노드에 대한 포인트로 이루어짐

구조								
(노드명)[데이터][다음 연결 포인터]

새로운 노드가 추가될 때
*추가 전
	(헤드)[데이터][노드1] -> (노드1)[데이터][테일] -> (노드2 추가)[데이터][테일] -> (테일)[데이터][NULL]
*노드2가 추가되었기 때문에 노드1의 다음 노드는 테일 -> 노드2로 변경
*추가 후
	(헤드)[데이터][노드1] -> (노드1)[데이터][노드2] -> (노드2)[데이터][테일] -> (테일)[데이터][NULL]

노드가 삭제될 때
*삭제 전
	(헤드)[데이터][노드1] -> (노드1)[데이터][노드2] -> (노드2 삭제)[데이터][테일] -> (테일)[데이터][NULL]
*노드2가 삭제되었기 때문에 노드1의 다음 노드는 노드2 -> 테일로 변경
*삭제 후
	(헤드)[데이터][노드1] -> (노드1)[데이터][테일] -> (테일)[데이터][NULL]

기능
*노드 생성/소멸
	- 메모리상에 노드를 생성/소멸
*노드 추가
	- 테일 노드 위에 새로운 노드를 추가
*노드 탐색
	- 특정 인덱스에 위하는 노드를 반환
*노드 삭제
	- 특정 노드를 리스트에서 삭제
*노드 삽입
	- 새로운 노드를 특정 위치에 삽입

장점
*배열에 비해 새로운 노드의 추가/삽입/삭제가 용이
*단방향이기 때문에 다음 노드를 얻어오는 연산에 대하여 비용이 발생하지 않음

단점
*다음 노드를 바라보는 포인터 때문에 노드마다 4바이트의 메모리 추가가 필요
*특정 위치에 있는 노드를 얻기 위한 비용이 큼
노드 개수가 100개라 가정했을 때 100번째 노드를 얻기 위해 100번의 루프 탐색이 이루어져야 하기 때문